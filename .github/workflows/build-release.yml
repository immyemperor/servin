name: Build and Release Servin

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: write
  
env:
  GO_VERSION: '1.24'
  APP_VERSION: '1.0.0'

jobs:
  build:
    name: Build ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: windows
            os: windows-latest
            os_name: windows
            arch: amd64
            archive_ext: zip
          - platform: linux
            os: ubuntu-latest
            os_name: linux
            arch: amd64
            archive_ext: tar.gz
          - platform: mac
            os: macos-latest
            os_name: macos
            arch: universal
            archive_ext: tar.gz

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    # Platform-specific dependency setup
    - name: Install Windows dependencies
      if: matrix.platform == 'windows'
      shell: powershell
      run: |
        # Verify Python installation
        python --version
        pip --version
        
        # Install NSIS for installer creation
        choco install nsis -y --no-progress
        # Update PATH for current session
        $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH","User")
        Write-Host "Checking NSIS installation..."
        if (Test-Path "C:\Program Files (x86)\NSIS\makensis.exe") {
          Write-Host "NSIS found at: C:\Program Files (x86)\NSIS\makensis.exe"
        } elseif (Test-Path "C:\Program Files\NSIS\makensis.exe") {
          Write-Host "NSIS found at: C:\Program Files\NSIS\makensis.exe"
        } else {
          Write-Host "NSIS not found in standard locations"
        }

    - name: Install Linux dependencies
      if: matrix.platform == 'linux'
      run: |
        sudo apt-get update
        sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
          python3 \
          python3-tk \
          python3-dev \
          python3-pip
        echo "Checking installations..."
        python3 --version

    - name: Install macOS dependencies
      if: matrix.platform == 'mac'
      run: |
        echo "Checking existing dependencies..."
        python3 --version || echo "Python3 not found"
        python3 -c "import tkinter; print('tkinter available')" || echo "tkinter not available"
        if ! python3 -c "import tkinter" 2>/dev/null; then
          echo "Installing python-tk..."
          brew install python-tk --quiet || echo "python-tk installation skipped"
        fi

    # Make build script executable
    - name: Make build script executable
      shell: bash
      run: chmod +x ./build-all.sh

    # Build using the new build-all.sh script
    - name: Build Servin for ${{ matrix.platform }}
      shell: bash
      run: |
        echo "Building Servin for ${{ matrix.platform }} using build-all.sh..."
        PLATFORM=${{ matrix.platform }} ./build-all.sh
        
    # Verify build outputs
    - name: Verify build outputs
      shell: bash
      run: |
        echo "Verifying build outputs for ${{ matrix.platform }}..."
        ls -la build/${{ matrix.platform }}/
        
        # Test GUI executable if it exists (platform-specific)
        if [ "${{ matrix.platform }}" = "windows" ]; then
          if [ -f "build/${{ matrix.platform }}/servin-gui.exe" ]; then
            echo "Testing Windows GUI executable..."
            python webview_gui/test_executable.py build/${{ matrix.platform }}/servin-gui.exe
          else
            echo "Windows GUI executable not found"
          fi
        else
          if [ -f "build/${{ matrix.platform }}/servin-gui" ]; then
            echo "Testing GUI executable..."
            python3 webview_gui/test_executable.py build/${{ matrix.platform }}/servin-gui
          else
            echo "GUI executable not found"
          fi
        fi
        
    - name: Build Windows installer
      if: matrix.platform == 'windows'
      shell: powershell
      continue-on-error: true
      run: |
        cd dist/${{ matrix.platform }}/installer
        
        # Find NSIS makensis.exe
        $nsisPath = ""
        if (Test-Path "C:\Program Files (x86)\NSIS\makensis.exe") {
          $nsisPath = "C:\Program Files (x86)\NSIS\makensis.exe"
        } elseif (Test-Path "C:\Program Files\NSIS\makensis.exe") {
          $nsisPath = "C:\Program Files\NSIS\makensis.exe"
        } else {
          $nsisPath = (Get-Command makensis -ErrorAction SilentlyContinue).Source
        }
        
        if ($nsisPath -and (Test-Path "servin-installer.nsi")) {
          Write-Host "Building Windows installer with NSIS..."
          & "$nsisPath" servin-installer.nsi
          
          if (Test-Path "ServinSetup-1.0.0.exe") {
            Move-Item "ServinSetup-1.0.0.exe" "../servin_${{ env.APP_VERSION }}_${{ matrix.os_name }}_${{ matrix.arch }}_installer.exe"
            Write-Host "Windows installer created successfully"
          }
        } else {
          Write-Host "NSIS not available, skipping installer creation"
        }

    # Create distribution archives
    - name: Create distribution archive
      shell: bash
      run: |
        cd dist/${{ matrix.platform }}
        
        # Create the main distribution archive
        archive_name="servin_${{ env.APP_VERSION }}_${{ matrix.os_name }}_${{ matrix.arch }}"
        
        if [ "${{ matrix.platform }}" = "windows" ]; then
          # For Windows, create ZIP archive
          if command -v powershell >/dev/null 2>&1; then
            powershell -Command "Compress-Archive -Path './*' -DestinationPath '../${archive_name}.zip' -Force"
          else
            zip -r "../${archive_name}.zip" .
          fi
          echo "Created: ${archive_name}.zip"
        else
          # For Unix systems, create tar.gz archive
          tar -czf "../${archive_name}.tar.gz" .
          echo "Created: ${archive_name}.tar.gz"
        fi
        
        # Create installer-only archive if installer exists
        if [ -f "servin_${{ env.APP_VERSION }}_${{ matrix.os_name }}_${{ matrix.arch }}_installer.exe" ]; then
          cp "servin_${{ env.APP_VERSION }}_${{ matrix.os_name }}_${{ matrix.arch }}_installer.exe" "../"
          echo "Windows installer ready: servin_${{ env.APP_VERSION }}_${{ matrix.os_name }}_${{ matrix.arch }}_installer.exe"
        fi

    # Verify build artifacts
    - name: Verify build artifacts
      shell: bash
      run: |
        echo "Build artifacts for ${{ matrix.platform }}:"
        ls -la build/${{ matrix.platform }}/
        echo ""
        echo "Distribution directory:"
        ls -la dist/${{ matrix.platform }}/
        echo ""
        echo "Final distribution packages:"
        ls -la dist/servin_${{ env.APP_VERSION }}_${{ matrix.os_name }}_${{ matrix.arch }}*
        echo ""
        echo "Distribution summary:"
        find dist -name "servin_${{ env.APP_VERSION }}_${{ matrix.os_name }}_${{ matrix.arch }}*" -type f | while read file; do
          size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null || echo "unknown")
          echo "  $(basename "$file") (${size} bytes)"
        done

    # Upload build artifacts
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: servin-${{ matrix.platform }}-${{ env.APP_VERSION }}
        path: |
          dist/servin_${{ env.APP_VERSION }}_${{ matrix.os_name }}_${{ matrix.arch }}*

  # Collect all artifacts and create release package
  package:
    name: Package Release
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Organize release packages
      run: |
        mkdir -p release
        
        # Copy distribution packages to release directory
        find artifacts -name "servin_${{ env.APP_VERSION }}_*" -type f | while read file; do
          cp "$file" release/
        done
        
        echo "Release packages:"
        ls -la release/
        echo ""
        echo "Package summary:"
        echo "=================="
        for file in release/*; do
          if [ -f "$file" ]; then
            filename=$(basename "$file")
            size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null || echo "unknown")
            echo "[$filename] ($size bytes)"
            
            # Identify package type
            case "$filename" in
              *_installer.exe) echo "   -> Windows NSIS Installer Wizard" ;;
              *_macos_universal.tar.gz) echo "   -> macOS Universal Distribution (Intel + Apple Silicon)" ;;
              *_linux_amd64.tar.gz) echo "   -> Linux x64 Distribution Archive" ;;
              *_windows_amd64.zip) echo "   -> Windows x64 Distribution Archive" ;;
              *) echo "   -> Distribution Package" ;;
            esac
          fi
        done

    - name: Create unified release archive
      run: |
        cd release
        zip -r ../servin-cross-platform-${{ env.APP_VERSION }}.zip .
        cd ..
        
        echo "Final release archive:"
        ls -la servin-cross-platform-${{ env.APP_VERSION }}.zip

    - name: Upload release package
      uses: actions/upload-artifact@v4
      with:
        name: servin-cross-platform-release
        path: |
          servin-cross-platform-${{ env.APP_VERSION }}.zip
          release/

    # Create GitHub release on tag push
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: |
          release/servin_${{ env.APP_VERSION }}_*.zip
          release/servin_${{ env.APP_VERSION }}_*.tar.gz
          release/servin_${{ env.APP_VERSION }}_*_installer.exe
          servin-cross-platform-${{ env.APP_VERSION }}.zip
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## Servin Container Runtime v${{ env.APP_VERSION }}
          
          ### 🚀 Installation Options
          
          **Windows (x64):**
          - `servin_${{ env.APP_VERSION }}_windows_amd64_installer.exe` - NSIS Installer Wizard (Recommended)
          - `servin_${{ env.APP_VERSION }}_windows_amd64.zip` - Manual Installation Archive
          
          **Linux (x64):**
          - `servin_${{ env.APP_VERSION }}_linux_amd64.tar.gz` - Distribution with Wizard Installer
          
          **macOS (Universal - Intel + Apple Silicon):**
          - `servin_${{ env.APP_VERSION }}_macos_universal.tar.gz` - Universal Distribution with Wizard Installer
          
          **Cross-Platform:**
          - `servin-cross-platform-${{ env.APP_VERSION }}.zip` - All platforms in one archive
          
          ### 📦 What's Included
          
          Each package contains:
          - **servin** - CLI container runtime
          - **servin-tui** - Terminal User Interface (TUI)
          - **servin-gui** - Modern GUI application (PyInstaller binary)
          - **Wizard installers** - Interactive GUI installation wizards
          - **Professional icons** - Multi-format icon set
          - **Documentation** - README, LICENSE, and usage guides
          
          ### 🎯 Installation Instructions
          
          **Windows:**
          1. Download `servin_${{ env.APP_VERSION }}_windows_amd64_installer.exe`
          2. Run installer as Administrator
          3. Or extract ZIP and use `install-servin.bat`
          
          **macOS:**
          1. Download `servin_${{ env.APP_VERSION }}_macos_universal.tar.gz`
          2. Extract and double-click `ServinInstaller.command`
          3. Or use Terminal: `./install-servin.sh`
          
          **Linux:**
          1. Download `servin_${{ env.APP_VERSION }}_linux_amd64.tar.gz`
          2. Extract and run `./ServinInstaller.sh`
          3. Or use Terminal: `sudo ./install-servin.sh`
      env:
        GITHUB_TOKEN: ${{ secrets.SERVIN_TOKEN }}

  # Test installations (optional)
  test:
    name: Test Installation ${{ matrix.platform }}
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - platform: windows
            os: windows-latest
            os_name: windows
            arch: amd64
          - platform: linux
            os: ubuntu-latest
            os_name: linux
            arch: amd64
          - platform: mac
            os: macos-latest
            os_name: macos
            arch: universal
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: servin-${{ matrix.platform }}-${{ env.APP_VERSION }}

    - name: Extract distribution archive
      shell: bash
      run: |
        if [ "${{ matrix.platform }}" = "windows" ]; then
          if [ -f "servin_${{ env.APP_VERSION }}_${{ matrix.os_name }}_${{ matrix.arch }}.zip" ]; then
            powershell -Command "Expand-Archive -Path 'servin_${{ env.APP_VERSION }}_${{ matrix.os_name }}_${{ matrix.arch }}.zip' -DestinationPath 'test-install'"
          fi
        else
          if [ -f "servin_${{ env.APP_VERSION }}_${{ matrix.os_name }}_${{ matrix.arch }}.tar.gz" ]; then
            mkdir -p test-install
            tar -xzf "servin_${{ env.APP_VERSION }}_${{ matrix.os_name }}_${{ matrix.arch }}.tar.gz" -C test-install --strip-components=1
          fi
        fi

    - name: Test CLI binary
      shell: bash
      run: |
        echo "Testing CLI binary..."
        if [ "${{ matrix.platform }}" = "windows" ]; then
          if [ -f "test-install/servin.exe" ]; then
            ./test-install/servin.exe --version || echo "CLI test completed"
          else
            echo "CLI binary not found"
            exit 1
          fi
        else
          if [ -f "test-install/servin" ]; then
            chmod +x test-install/servin
            ./test-install/servin --version || echo "CLI test completed"
          else
            echo "CLI binary not found"
            exit 1
          fi
        fi

    - name: Test Desktop TUI binary
      shell: bash
      run: |
        echo "Testing Desktop TUI binary..."
        if [ "${{ matrix.platform }}" = "windows" ]; then
          if [ -f "test-install/servin-tui.exe" ]; then
            echo "Desktop TUI binary exists: servin-tui.exe"
          else
            echo "Desktop TUI binary missing"
            exit 1
          fi
        else
          if [ -f "test-install/servin-tui" ]; then
            chmod +x test-install/servin-tui
            echo "Desktop TUI binary exists: servin-tui"
          else
            echo "Desktop TUI binary missing"
            exit 1
          fi
        fi

    - name: Test GUI launcher
      shell: bash
      run: |
        echo "Testing GUI launcher..."
        if [ "${{ matrix.platform }}" = "windows" ]; then
          if [ -f "test-install/servin-gui.exe" ]; then
            echo "GUI executable exists: servin-gui.exe"
          else
            echo "GUI executable missing"
          fi
        else
          if [ -f "test-install/servin-gui" ]; then
            chmod +x test-install/servin-gui
            echo "GUI executable exists: servin-gui"
          else
            echo "GUI executable missing"
          fi
        fi

    - name: Verify wizard installers
      shell: bash
      run: |
        echo "Verifying wizard installers:"
        if [ "${{ matrix.platform }}" = "windows" ]; then
          if [ -f "servin_${{ env.APP_VERSION }}_${{ matrix.os_name }}_${{ matrix.arch }}_installer.exe" ]; then
            echo "Windows NSIS installer verified"
          elif [ -d "test-install/installer" ]; then
            echo "Windows installer package verified"
          else
            echo "No Windows installer found"
          fi
        elif [ "${{ matrix.platform }}" = "mac" ]; then
          if [ -f "test-install/ServinInstaller.command" ]; then
            echo "macOS wizard installer verified"
          else
            echo "macOS installer missing"
          fi
        else
          if [ -f "test-install/ServinInstaller.sh" ]; then
            echo "Linux wizard installer verified"
          else
            echo "Linux installer missing"
          fi
        fi


